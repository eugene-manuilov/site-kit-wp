name: WP 4.9

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  docker-image:
    name: Build WP Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('tests/e2e/**/*.php') }}
      - uses: docker/setup-qemu-action@v1
        if: steps.cache.outputs.cache-hit != 'true'
      - uses: docker/setup-buildx-action@v1
        if: steps.cache.outputs.cache-hit != 'true'
      - uses: docker/login-action@v1 
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      # - uses: docker/build-push-action@v2
      #   if: steps.cache.outputs.cache-hit != 'true'
      #   with:
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache
      #     push: true
      #     context: .
      #     file: ./bin/local-env/docker/wordpress/Dockerfile
      #     tags: |
      #       ghcr.io/eugene-manuilov/site-kit/wp-4-9:20201101.0
      #     build-args: |
      #       WP_IMAGE=wordpress:4.9

  # e2e:
  #   name: Run E2E Tests
  #   runs-on: ubuntu-latest
  #   services:
  #     mysql:
  #       image: mysql:5.7
  #       ports:
  #         - 3306
  #       env:
  #         MYSQL_ROOT_PASSWORD: example
  #         MYSQL_DATABASE: wordpress_test
  #       options: >-
  #         --health-cmd="mysqladmin ping"
  #         --health-interval=5s
  #         --health-timeout=2s
  #         --health-retries=3
  #     wordpress:
  #       image: wordpress:4.9
  #       ports:
  #         - 9002:80
  #       volumes:
  #         - wordpress_data:/var/www/html
  #       env:
  #         WORDPRESS_CONFIG_EXTRA: |
  #           define( 'SCRIPT_DEBUG', true );
  #       options: >-
  #         --mount type=bind,source=/home/runner/work/site-kit-wp/site-kit-wp,target=/var/www/html/wp-content/plugins/google-site-kit,readonly
  #       # --mount type=bind,source=/home/runner/work/site-kit-wp/site-kit-wp/tests/e2e/plugins,target=/var/www/html/wp-content/plugins/google-site-kit-test-plugins,readonly
  #       # --mount type=bind,source=/home/runner/work/site-kit-wp/site-kit-wp/tests/e2e/mu-plugins,target=/var/www/html/wp-content/mu-plugins,readonly
  #   steps:
  #     - uses: actions/checkout@v2
  #     # - name: Get Composer Cache Directory
  #     #   id: composer-cache
  #     #   run: echo "::set-output name=dir::$(composer config cache-files-dir)"
  #     # - uses: actions/cache@v2
  #     #   with:
  #     #     path: ${{ steps.composer-cache.outputs.dir }}
  #     #     key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
  #     #     restore-keys: |
  #     #       ${{ runner.os }}-composer-
  #     # - name: Composer Install
  #     #   run: composer install --no-dev --no-interaction --no-progress
  #     # - name: Configure WordPress
  #     #   run: |
  #     #     docker pull wordpress:cli
  #     #     docker run -i --rm --volumes-from ${{ job.services.wordpress.id }} --network ${{ job.services.wordpress.network }} wordpress:cli wp db import wp-content/plugins/google-site-kit/bin/local-env/dump.sql
  #     # - name: Read .nvmrc
  #     #   run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
  #     #   id: nvm
  #     # - name: Setup Node.js (.nvmrc)
  #     #   uses: actions/setup-node@v1
  #     #   with:
  #     #     node-version: "${{ steps.nvm.outputs.NVMRC }}"
  #     # - name: Cache Node - npm
  #     #   uses: actions/cache@v1
  #     #   with:
  #     #     path: ~/.npm
  #     #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #     #     restore-keys: |
  #     #       ${{ runner.os }}-node-cache-
  #     # - name: npm install
  #     #   run: npm ci
  #     # - name: Run Tests
  #     #   run: npm run test:e2e
